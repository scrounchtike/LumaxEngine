
TODO

August 16th

make entites easier to build, update and modify (and remove)

Differentiate between static and dynamic entities
Static -> Has a Static Transform3D - Cannot move
Dynamic -> Has a Dynamic Transform3D - Can move

Differentiate solely based on transform type?
if component == Transform3D -> Static
component == DynamicTransform3D || PivotTransform3D -> Dynamic

Update entities according to this

Physics / Spatial Partitioning for static entities after init time-add

1. Compile-time ECS declaration
2. Init ECS
3. Init entities + systems , static + dynamic entities
4. Build Hierarchy for static objects (for render and physics)

5. loop input + update + render entities

Spatial Partitioning

Could use BSP Tree with a polygon soup
Bounding Volume Hierarchy for physics
Kd-tree or octree(quadtree for 2D)

Components to add to entity

1. Mesh
2. Material (Material + ShaderPipeline) each has a unique ID for sorting
3. Transform3D, DynamicTransform3D, PivotTransform3D
4. Movement3D
5. PhysicsPrimitive (AABB, Sphere, Plane, OBB)

for ALL entities (static + dynamic)
Sort drawcalls to regroup similar materials (and hence reduce state changes)

Only sort at init time, update entity if - added - removed - material has been updated
No need to resort every frame (no depth info just yet)

ECSManagerType ecs;

uint32 entityName  = ecs.makeEntity( COMPONENTS... ) - Static
uint32 entity2Name = ecs.makeEntity( COMPONENTS... ) - Static

uint32 entity3Name = ecs.makeEntity( COMPONENTS... ) - Dynamic

ecs.sortDrawcalls() - for all objects added to this point
ecs.buildHierarchy() - for static objects - Whatever hierarchy is decided upon (Could have multiple hierarchies for different purposes)


uint32 entity = ecs.makeEntity(resManager->getModel3D("cube.obj"), new MaterialPipeline(resManager->getMaterial("material2"), resManager->getShaderPipeline("pipeline3Dcolor")), 
new AABB(...), new Transform3D(STATIC));


How to sort drawcalls

sort key-value pair map

key                                                  value
2D - 3D - Translucency - Shader - Material   ---->   Entity render data

Translucent objects must always be last
Opaque = 0
Translucent = 1

Specialization of different components to add

1. Transform3D
entity -> staticEntities

2. DynamicTransform3D || PivotTransform3D
entity -> dynamicEntities

3. PhysicsPrimitive
entity -> physicsEntities

4. MaterialPipeline
Assign the entity the ID of the material pipeline


Render Systems

will manage the order of the entities

std::map<uint32, uint32> entities;

add entity to system -> insert into map key = calculate based on flags and material pipeline value = entity



How to sort entities

|      2D | Translucency | ShaderPipeline | Material |

       1        0                0             0       -> 2D is drawn last
	     0        1                0             0       -> Translucent 3D objects are the last 3D objects to be drawn
       0        0                3             1       
       0        0                3             0
       0        0                2             2
       0        0                2             1   
       0        0                2             0
       0        0                1             0
       0        0                0             x       -> first pipeline, material x
       0        0                0             0       -> first pipeline, first material
